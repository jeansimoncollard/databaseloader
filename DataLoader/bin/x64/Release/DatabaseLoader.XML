<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DatabaseLoader</name>
    </assembly>
    <members>
        <member name="T:DatabaseLoader.IOracleLoader">
            <summary>
            Provides methods to load and unload in the databse the ".dataload" files. It is implemented by OracleLoader 
            </summary>
        </member>
        <member name="M:DatabaseLoader.IOracleLoader.BulkLoad(System.String,System.String,System.Boolean)">
            <summary>
            This function defers all deferable constraints before loading the data in the database. This makes the loading much faster, but loses all error information if the loading fails. 
            </summary>
            <remarks>
            The database must contain deferable constraints for BulkLoad to make a difference.
            </remarks>
            <param name="connectionString">Connection string of the database to load the data into.</param>
            <param name="filePath">Full path of the ".dataload" file to be loaded.</param>
            <param name="isPermanent">Whether to leave the data in the database after the process is finished running. True to not make the data stay in the database, false to automatically unload it when process terminates.</param>
        </member>
        <member name="M:DatabaseLoader.IOracleLoader.ConventionalLoad(System.String,System.String,System.Boolean)">
            <summary>
            This function loads the data in the database using simple insert statements.
            </summary>
            <param name="connectionString">Connection string of the database to load the data into.</param>
            <param name="filePath">Full path of the ".dataload" file to be loaded.</param>
             <param name="isPermanent">Whether to leave the data in the database after the process is finished running. True to not make the data stay in the database, false to automatically unload it when process terminates.</param>
        </member>
        <member name="M:DatabaseLoader.IOracleLoader.Load(System.String,System.String,System.Boolean)">
            <summary>
            This function tries to bulk load the data first. If it fails, it tries the conventional load to retrieve the error information.
            </summary>
            <param name="connectionString">Connection string of the database to load the data into.</param>
            <param name="filePath">Full path of the ".dataload" file to be loaded in the database.</param>
            <param name="isPermanent">Whether to leave the data in the database after the process is finished running. True to not make the data stay in the database, false to automatically unload it when process terminates.</param>
        </member>
        <member name="M:DatabaseLoader.IOracleLoader.Unload(System.String,System.String)">
            <summary>
            This function unloads the data from the database.
            </summary>
            <remarks>
            If the data set contains relative dates, the data must be unloaded on the same day that it has been loaded.
            </remarks>
            <param name="connectionString">Connection string of the database to load the data into.</param>
            <param name="filePath">Full path of the ".dataload" file to be loaded.</param>
        </member>
        <member name="T:DatabaseLoader.OracleLoader">
            <summary>
            This class is responsible for loading and unloading from the database the ".dataload" files created with Database Editor.
            </summary>
        </member>
        <member name="M:DatabaseLoader.OracleLoader.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:DatabaseLoader.OracleLoader.Load(System.String,System.String,System.Boolean)">
            <summary>
            This function tries to bulk load the data first. If it fails, it tries the conventional load to retrieve the error information.
            </summary>
            <param name="connectionString">Connection string of the database to load the data into.</param>
            <param name="filePath">Full path of the ".dataload" file to be loaded in the database.</param>
            <param name="isPermanent">Whether to leave the data in the database after the process is finished running. True to not make the data stay in the database, false to automatically unload it when process terminates.</param>
        </member>
        <member name="M:DatabaseLoader.OracleLoader.ConventionalLoad(System.String,System.String,System.Boolean)">
            <summary>
            This function loads the data in the database using simple insert statements.
            </summary>
            <param name="connectionString">Connection string of the database to load the data into.</param>
            <param name="filePath">Full path of the ".dataload" file to be loaded.</param>
             <param name="isPermanent">Whether to leave the data in the database after the process is finished running. True to not make the data stay in the database, false to automatically unload it when process terminates.</param>
        </member>
        <member name="M:DatabaseLoader.OracleLoader.BulkLoad(System.String,System.String,System.Boolean)">
            <summary>
            This function defers all deferable constraints before loading the data in the database. This makes the loading much faster, but loses all error information if the loading fails. 
            </summary>
            <remarks>
            The database must contain deferable constraints for BulkLoad to make a difference.
            </remarks>
            <param name="connectionString">Connection string of the database to load the data into.</param>
            <param name="filePath">Full path of the ".dataload" file to be loaded.</param>
            <param name="isPermanent">Whether to leave the data in the database after the process is finished running. True to not make the data stay in the database, false to automatically unload it when process terminates.</param>
        </member>
        <member name="M:DatabaseLoader.OracleLoader.Unload(System.String,System.String)">
            <summary>
            This function unloads the data from the database.
            </summary>
            <remarks>
            If the data set contains relative dates, the data must be unloaded on the same day that it has been loaded.
            </remarks>
            <param name="connectionString">Connection string of the database to load the data into.</param>
            <param name="filePath">Full path of the ".dataload" file to be loaded.</param>
        </member>
        <member name="T:DatabaseLoader.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DatabaseLoader.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DatabaseLoader.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:DatabaseLoader.Properties.Resources.UnloadProcessSourceCode">
             <summary>
               Looks up a localized string similar to using Oracle.DataAccess.Client;
            using System;
            using System.Diagnostics;
            using System.IO;
            
            namespace DatabaseLoaderStartupProject
            {
                class Program
                {
                    static void Main(string[] args)
                    {
                        //Because the connectionstring might contain spaces and those are split in 
                        //different array element when passed as process arguments, 
                        //I placed the processId and file path at each end, because we know they don&apos;t contain spaces. 
                        //And assume [rest of string was truncated]&quot;;.
             </summary>
        </member>
    </members>
</doc>
